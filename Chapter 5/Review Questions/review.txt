1. Assume all variables are of type int. Find the value of each of the following
variables:
a. x = (2 + 3) * 6; x = 30
b. x = (12 + 6)/2*3; x = 27
c. y = x = (2 + 3)/4; x = 1, y = 1
d. y = 3 + 2*(x = 7/2); y = 9

2. Assume all variables are of type int. Find the value of each of the following
variables:
a. x = (int) 3.8 + 3.3; x = 6
b. x = (2 + 3) * 10.5; x = 52
c. x = 3 / 5 * 22.0; x = 13
d. x = 22.0 * 3 / 5; x = 13

3. You suspect that there are some errors in the next program. Can you find them?
int main(void)
{
    int i = 1;
    float n;

    printf("Watch out! Here come a bunch of fractions!\n");
    while (i < 30){
    n = 1/i;
    printf("%f", n);
    n++;
    }
    printf("That's all, folks!\n");
    return 0;
}

4. Here's an alternative design for Listing 5.9. It appears to simplify the code by
replacing the two scanf() statements in Listing 5.9 with a single scanf()
statement. What makes this design inferior to the original?
#include <stdio.h>
#define S_TO_M 60
int main(void)
{
 int sec, min, left;
 printf("This program converts seconds to minutes and ");
 printf("seconds.\n");
 printf("Just enter the number of seconds.\n");
 printf("Enter 0 to end the program.\n");
 while (sec > 0) {
 scanf("%d", &sec);
 min = sec/S_TO_M;
 left = sec % S_TO_M;
 printf("%d sec is %d min, %d sec. \n", sec, min, left);
 printf("Next input?\n");
 }
 printf("Bye!\n");
 return 0;
}

5. What will this program print?
#include <stdio.h>
#define FORMAT "%s! C is cool!\n"
int main(void)
{
 int num = 10;
 printf(FORMAT,FORMAT);
 printf("%d\n", ++num);
 printf("%d\n", num++);
 printf("%d\n", num--);
 printf("%d\n", num);
 return 0;
}

6. What will the following program print?
#include <stdio.h>
int main(void)
{
 char c1, c2;
 int diff;
 float num;
 c1 = 'S';
 c2 = 'O';
 diff = c1 - c2;
 num = diff;
 printf("%c%c%c:%d %3.2f\n", c1, c2, c1, diff, num);
 return 0;
}


7. What will this program print?
#include <stdio.h>
#define TEN 10
int main(void)
{
 int n = 0;
 while (n++ < TEN)
 printf("%5d", n);
 printf("\n");
 return 0;
}
1
2
3
4
5
6
7
8
9

8. Modify the last program so that it prints the letters a through g instead. 

9. If the following fragments were part of a complete program, what would they
print?
a.b. int x = 0;
c. while (++x < 3)
d. printf("%4d", x);
e.
f.
g. int x = 100;
h.
i. while (x++ < 103)
j. printf("%4d\n",x);
k. printf("%4d\n",x);
l.
m.
n. char ch = 's';
o.
p. while (ch < 'w')
q. {
r. printf("%c", ch);
s. ch++;
t. }
u. printf("%c\n",ch);
v.

10.What will the following program print?
#define MESG "COMPUTER BYTES DOG"
#include <stdio.h>
int main(void)
{
 int n = 0;
 while ( n < 5 )
 printf("%s\n", MESG);
 n++;
 printf("That's all.\n");
 return 0;
}

Will print string 5 times



11.Construct statements that do the following (or, in other terms, have the following
side effects):
a. Increase the variable x by 10.



b. Increase the variable x by 1.

x++;

c. Assign twice the sum of a and b to c.


d. Assign a plus twice b to c.

12.Construct statements that do the following:
a. Decrease the variable x by 1.

(x--) 

b. Assigns to m the remainder of n divided by k.

m = (n % k )

c. Divide q by b minus a and assign the result to p.

p = (b - a) / q 


d. Assign to x the result of dividing the sum of a and b by the product of c
and d.

x = (a+b) / (c*d)


